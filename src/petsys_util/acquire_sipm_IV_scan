#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
from time import sleep
import argparse
import os
import subprocess
import ROOT
import sys
import math

sys.path.append("/home/cmsdaq/Programs/Lab5015Utils/")
from Lab5015_utils_p2 import Keithley2450

parser = argparse.ArgumentParser(description='Acquire SiPM IV scan')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("--bvMin", type=str, dest="bvMin", required=True, help="starting bv")
parser.add_argument("--bvMax", type=str, dest="bvMax", required=True, help="ending bv")
parser.add_argument("--aldoA", dest="aldoA", action="store_true", help="do aldo A")
parser.add_argument("--aldoB", dest="aldoB", action="store_true", help="do aldo B")


#------------------------
# parsing input arguments
args = parser.parse_args()


#-----------------------------
# load configuration from file
mask = config.LOAD_ALL
# if args.mode != "mixed":
#         mask ^= config.LOAD_QDCMODE_MAP
mask ^= config.LOAD_QDCMODE_MAP
systemConfig = config.ConfigFromFile(args.config, loadMask=mask)

daqd = daqd.Connection()
daqd.initializeSystem()

asicsConfig = daqd.getAsicsConfig()
activeAsics = daqd.getActiveAsics()

if len(activeAsics) == 0:
        print "no active ASICs found. Exiting..."
        exit()



#--------------------------------------------------------------------
# enable ALDO in case needed (it's only on even ASICs, e.g. 0,2,4...)
#if args.aldo:
#        hvdac_config = daqd.get_hvdac_config()
#        for portID, slaveID, railID in hvdac_config.keys():
#                # set 48 V as ALDO input bias (should not exceed this value)
#                hvdac_config[(portID, slaveID, railID)] = systemConfig.mapBiasChannelVoltageToDAC((portID, slaveID, railID), 48)
#        daqd.set_hvdac_config(hvdac_config)


mykey = Keithley2450()


asicsConfig0 = deepcopy(asicsConfig)
cfg = deepcopy(asicsConfig0)


for portID, slaveID, chipID in activeAsics:
        if chipID%2 is not 0:
                continue
        
        ac = cfg[(portID, slaveID, chipID)]
        gc = (cfg[(portID, slaveID, chipID)]).globalConfig
        gc.setValue("c_aldo_en", 0b00)
        daqd.setAsicsConfig(cfg)
        sleep(0.1)
        
        (_, voltage) = mykey.meas_V()
        print "ALDO off   I: %f uA" % (float(voltage)*1E06/10.)


#--------------
# define graphs
g_IV = ROOT.TGraph()
g_dLogIdV = ROOT.TGraph()


#--------
# ov scan
for portID, slaveID, chipID in activeAsics:
        if chipID%2 is not 0:
                continue

        ac = cfg[(portID, slaveID, chipID)]
        for dac in range(0,256,1):
                voltA, voltB = systemConfig.mapALDODACToVoltage((portID, slaveID, chipID),dac)
                volt = 0.
                
                gc = (cfg[(portID, slaveID, chipID)]).globalConfig
                if args.aldoA and not args.aldoB:
                        gc.setValue("c_aldo_en", 0b10)
                        gc.setValue("Valdo_A_DAC", dac)
                        volt = float(voltA)
                if args.aldoB and not args.aldoA:
                        gc.setValue("c_aldo_en", 0b01)
                        gc.setValue("Valdo_B_DAC", dac)
                        volt = float(voltB)
                daqd.setAsicsConfig(cfg)
                sleep(0.1)
                
                if volt < float(args.bvMin):
                        continue
                if volt > float(args.bvMax):
                        break
                        
                curr = 0.
                nMeas = 10
                for _ in range(0, nMeas):
                        (_, voltage) = mykey.meas_V()
                        curr = curr + float(voltage)*1E06/10.
                        #print ">>> dac: %3d   V: %6.3f V   I: %f uA" % (int(dac),volt,float(voltage)*1E06/10.)
                
                curr = curr / nMeas
                g_IV.SetPoint(g_IV.GetN(),volt,curr)
                print "dac: %3.0d   V: %6.3f V   I: %f uA" % (int(dac),volt,curr)


#-------------------------
# switch off bias voltages
#systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

for portID, slaveID, chipID in activeAsics:
        if chipID%2 is not 0:
                continue
        gc = (cfg[(portID, slaveID, chipID)]).globalConfig
        gc.setValue("c_aldo_en", 0b00)
daqd.setAsicsConfig(cfg)                                                                                                                                           


c1 = ROOT.TCanvas("c1","c1",1300,600)
c1.Divide(2,1)
c1.cd(1)
g_IV.Draw("APL")

c1.cd(2)
for point in range(1, g_IV.GetN()):
        x1 = g_IV.GetPointX(point-1)
        y1 = g_IV.GetPointY(point-1)
        x2 = g_IV.GetPointX(point)
        y2 = g_IV.GetPointY(point)
        g_dLogIdV.SetPoint(g_dLogIdV.GetN(),0.5*(x1+x2),(math.log(y2)-math.log(y1))/(x2-x1))
g_dLogIdV.Draw("APL")

#c1.Print("prova.png")
raw_input("ok?")
